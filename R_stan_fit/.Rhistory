sink("model_summaries/simulated_data/2/model1_2_summary_simulated.txt")
print(summary(model1_2))
sink()
}
#
model2 <- glmer(stay~r*transition*(group*condition)+(r*transition+1|sub), family = binomial, data=data_all_shifted_recoded,control = glmerControl(optimizer = "bobyqa",optCtrl = list(maxfun=1e5)))
summary(model2)
if (save_outputs){
sink("model_summaries/simulated_data/2/model2_summary_simulated.txt")
print(summary(model2))
sink()
}
model2_2 <- glmer(stay~r*transition*(group*condition+age_z)+(r*transition+1|sub), family = binomial, data=data_all_shifted_recoded,control = glmerControl(optimizer = "bobyqa",optCtrl = list(maxfun=1e5)))
summary(model2_2)
if (save_outputs){
sink("model_summaries/simulated_data/2/model2_2_summary_simulated.txt")
print(summary(model2_2))
sink()
}
model3 <- glmer(stay~r*transition*(group)+(r*transition+1|sub), family = binomial, data=data_all_shifted_recoded,control = glmerControl(optimizer = "bobyqa",optCtrl = list(maxfun=1e5)))
summary(model3)
if (save_outputs){
sink("model_summaries/simulated_data/2/model3_summary_simulated.txt")
print(summary(model3))
sink()
}
#
model3_2 <- glmer(stay~r*transition*(group+age_z)+(r*transition+1|sub), family = binomial, data=data_all_shifted_recoded,control = glmerControl(optimizer = "bobyqa",optCtrl = list(maxfun=1e5)))
summary(model3_2)
if (save_outputs){
sink("model_summaries/simulated_data/2/model3_2_summary_simulated.txt")
print(summary(model3_2))
sink()
}
model4 <- glmer(stay~r*transition*(condition)+(r*transition+1|sub), family = binomial, data=data_all_shifted_recoded,control = glmerControl(optimizer = "bobyqa",optCtrl = list(maxfun=1e5)))
summary(model4)
if (save_outputs){
sink("model_summaries/simulated_data/2/model4_summary_simulated.txt")
print(summary(model4))
sink()
}
model4_2 <- glmer(stay~r*transition*(condition+age_z)+(r*transition+1|sub), family = binomial, data=data_all_shifted_recoded,control = glmerControl(optimizer = "bobyqa",optCtrl = list(maxfun=1e5)))
summary(model4_2)
if (save_outputs){
sink("model_summaries/simulated_data/2/model4_2_summary_simulated.txt")
print(summary(model4_2))
sink()
}
model5 <- glmer(stay~r*transition+(r*transition+1|sub), family = binomial, data=data_all_shifted_recoded,control = glmerControl(optimizer = "bobyqa",optCtrl = list(maxfun=1e5)))
summary(model5)
if (save_outputs){
sink("model_summaries/simulated_data/2/model5_summary_simulated.txt")
print(summary(model5))
sink()
}
model5_2 <- glmer(stay~r*transition*(age_z)+(r*transition+1|sub), family = binomial, data=data_all_shifted_recoded,control = glmerControl(optimizer = "bobyqa",optCtrl = list(maxfun=1e5)))
summary(model5_2)
if (save_outputs){
sink("model_summaries/simulated_data/2/model5_2_summary_simulated.txt")
print(summary(model5_2))
sink()
}
# MB/MF scores ---------------------------------
saveCSV_scores=FALSE
data_all_scores<-NULL
subs = unique(data_all_shifted_recoded$sub)
conditions = unique(data_all_shifted_recoded$condition)
data_all_scores$sub <- rep(0,length(subs)*2)
data_all_scores$condition <- rep(0,length(subs)*2)
data_all_scores$group <- rep(0,length(subs)*2)
data_all_scores$cond_order <- rep(0,length(subs)*2)
data_all_scores$n_com_rew <- rep(0,length(subs)*2)
data_all_scores$n_com_unrew <- rep(0,length(subs)*2)
data_all_scores$n_rare_rew <- rep(0,length(subs)*2)
data_all_scores$n_rare_unrew <- rep(0,length(subs)*2)
data_all_scores$p_com_rew <- rep(0,length(subs)*2)
data_all_scores$p_com_unrew <- rep(0,length(subs)*2)
data_all_scores$p_rare_rew <- rep(0,length(subs)*2)
data_all_scores$p_rare_unrew <- rep(0,length(subs)*2)
data_all_scores$mb_score <- rep(0,length(subs)*2)
data_all_scores$mf_score <- rep(0,length(subs)*2)
data_all_scores$age_z <- rep(0,length(subs)*2)
data_all_scores= as.data.frame(data_all_scores)
k=1
for (j in conditions){
for (i in subs){
locator_com_rew=which(data_all_shifted_recoded$condition==j & data_all_shifted_recoded$sub==i & data_all_shifted_recoded$stay==1 & data_all_shifted_recoded$r==1 & data_all_shifted_recoded$transition==1)
locator_com_unrew=which(data_all_shifted_recoded$condition==j & data_all_shifted_recoded$sub==i & data_all_shifted_recoded$stay==1 & data_all_shifted_recoded$r==-1 & data_all_shifted_recoded$transition==1)
locator_rare_rew=which(data_all_shifted_recoded$condition==j & data_all_shifted_recoded$sub==i & data_all_shifted_recoded$stay==1 & data_all_shifted_recoded$r==1 & data_all_shifted_recoded$transition==-1)
locator_rare_unrew=which(data_all_shifted_recoded$condition==j & data_all_shifted_recoded$sub==i & data_all_shifted_recoded$stay==1 & data_all_shifted_recoded$r==-1 & data_all_shifted_recoded$transition==-1)
locator_com_rew_all=which(data_all_shifted_recoded$condition==j & data_all_shifted_recoded$sub==i & data_all_shifted_recoded$r==1 & data_all_shifted_recoded$transition==1)
locator_com_unrew_all=which(data_all_shifted_recoded$condition==j & data_all_shifted_recoded$sub==i & data_all_shifted_recoded$r==-1 & data_all_shifted_recoded$transition==1)
locator_rare_rew_all=which(data_all_shifted_recoded$condition==j & data_all_shifted_recoded$sub==i & data_all_shifted_recoded$r==1 & data_all_shifted_recoded$transition==-1)
locator_rare_unrew_all=which(data_all_shifted_recoded$condition==j & data_all_shifted_recoded$sub==i & data_all_shifted_recoded$r==-1 & data_all_shifted_recoded$transition==-1)
temp_group = unique(data_all_shifted_recoded[which(data_all_shifted_recoded$condition==j & data_all_shifted_recoded$sub==i),]$group)
temp_cond_order = unique(data_all_shifted_recoded[which(data_all_shifted_recoded$condition==j & data_all_shifted_recoded$sub==i),]$cond_order)
temp_age_z = unique(data_all_shifted_recoded[which(data_all_shifted_recoded$condition==j & data_all_shifted_recoded$sub==i),]$age_z)
data_all_scores[k,]$sub = i
data_all_scores[k,]$condition = j
data_all_scores[k,]$cond_order = temp_cond_order
data_all_scores[k,]$group = temp_group
data_all_scores[k,]$age_z = temp_age_z
data_all_scores[k,]$n_com_rew <- length(locator_com_rew)
data_all_scores[k,]$n_com_unrew <- length(locator_com_unrew)
data_all_scores[k,]$n_rare_rew <- length(locator_rare_rew)
data_all_scores[k,]$n_rare_unrew <- length(locator_rare_unrew)
data_all_scores[k,]$p_com_rew <- length(locator_com_rew)/length(locator_com_rew_all)
data_all_scores[k,]$p_com_unrew <- length(locator_com_unrew)/length(locator_com_unrew_all)
data_all_scores[k,]$p_rare_rew <- length(locator_rare_rew)/length(locator_rare_rew_all)
data_all_scores[k,]$p_rare_unrew <- length(locator_rare_unrew)/length(locator_rare_unrew_all)
data_all_scores[k,]$mf_score <- data_all_scores[k,]$p_com_rew+data_all_scores[k,]$p_rare_rew-data_all_scores[k,]$p_com_unrew-data_all_scores[k,]$p_rare_unrew
data_all_scores[k,]$mb_score <- data_all_scores[k,]$p_com_rew-data_all_scores[k,]$p_rare_rew-data_all_scores[k,]$p_com_unrew+data_all_scores[k,]$p_rare_unrew
k=k+1
}
}
data_all_scores$condition=recode(data_all_scores$condition,'2'="BID",'1'="NT")
data_all_scores$group=recode(data_all_scores$group,'2'="ED",'1'="HC")
data_all_scores$cond_order=recode(data_all_scores$cond_order,'1'="NTfirst",'2'="BIDfirst")
data_all_scores$group=factor(data_all_scores$group)
data_all_scores$cond_order=factor(data_all_scores$cond_order)
data_all_scores$condition=factor(data_all_scores$condition)
data_all_scores$group = relevel(data_all_scores$group, ref="HC")
data_all_scores$cond_order = relevel(data_all_scores$cond_order, ref="NTfirst")
data_all_scores$condition = relevel(data_all_scores$condition, ref="NT")
if(saveCSV_scores){
write.csv(data_all_scores,"data/simulated/2/data_all_scores_simulated.csv",row.names = FALSE)
}
save_outputs=TRUE
model_A_MB_score <- lmer(mb_score~group*condition+age_z+(1|sub),data=data_all_scores)
summary(model_A_MB_score)
if (save_outputs){
sink("model_summaries/simulated_data/2/model_A_MB_score_summary_simulated.txt")
print(summary(model_A_MB_score))
sink()
}
model_A_MF_score <- lmer(mf_score~group*condition+age_z+(1|sub),data=data_all_scores)
summary(model_A_MF_score)
if (save_outputs){
sink("model_summaries/simulated_data/2/model_A_MF_score_summary_simulated.txt")
print(summary(model_A_MF_score))
sink()
}
model_p_com_rew <- lmer(p_com_rew~group*condition+age_z+(1|sub),data=data_all_scores)
summary(model_p_com_rew)
if (save_outputs){
sink("model_summaries/simulated_data/2/model_p_com_rew_summary_simulated.txt")
print(summary(model_p_com_rew))
sink()
}
model_p_rare_unrew <- lmer(p_rare_unrew~group*condition+age_z+(1|sub),data=data_all_scores)
summary(model_p_rare_unrew)
if (save_outputs){
sink("model_summaries/simulated_data/2/model_p_rare_unrew_summary_simulated.txt")
print(summary(model_p_rare_unrew))
sink()
}
model_p_com_unrew <- lmer(p_com_unrew~group*condition+age_z+(1|sub),data=data_all_scores)
summary(model_p_com_unrew)
if (save_outputs){
sink("model_summaries/simulated_data/2/model_p_com_unrew_summary_simulated.txt")
print(summary(model_p_com_unrew))
sink()
}
model_p_rare_rew <- lmer(p_rare_rew~group*condition+age_z+(1|sub),data=data_all_scores)
summary(model_p_rare_rew)
if (save_outputs){
sink("model_summaries/simulated_data/2/model_p_rare_rew_summary_simulated.txt")
print(summary(model_p_rare_rew))
sink()
}
setwd("~/Google Drive/Academia/manuscripts/code/mbl_edbi_manuscript_v2/R_stan_fit/") #from JO
library(MASS)
library(boot)
library(Rlab)
library(abind)
library(rstan)
library(shinystan)
library(loo)
library(useful)
library(Rpdb)
library(tidyverse)
rstan_options(auto_write = FALSE)
options(mc.cores =  parallel::detectCores())
seed_num = 2;
n_iter = 10;
save_outputs = TRUE
seeds = sample(1:6000,size=seed_num);
err = 1e-2;
L=0+err;
U=1-err;
L2=0+err;
U2=1000-err;
NS = 36; #number of subjects
NT = 150; #number of trials
NP = 5; #number of parameters
model_name = 'foerde_alter_2_JO.stan';
simulate_name = 'simulate_data_2_alter.R';
model_par_names=c("beta_1_MB","beta_1_MF","beta_2","alpha", "pers")
# param_sum_filenames = c('fitted_ind_params_summary_2021_09_09_02_06_39_niter_4000_ED_NT_foerde_alter_JO_wrong_ship.csv',
#                         'fitted_ind_params_summary_2021_09_09_03_35_02_niter_4000_ED_BID_foerde_alter_JO_wrong_ship.csv',
#                         'fitted_ind_params_summary_2021_09_09_05_00_16_niter_4000_HC_NT_foerde_alter_JO_wrong_ship.csv',
#                         'fitted_ind_params_summary_2021_09_09_06_38_21_niter_4000_HC_BID_foerde_alter_JO_wrong_ship.csv')
param_sum_filenames = c('fitted_ind_params_summary_2021_09_13_23_15_27_niter_4000_ED_NT_foerde_alter_2_JO_wrong_ship.csv',
'fitted_ind_params_summary_2021_09_14_00_52_02_niter_4000_ED_BID_foerde_alter_2_JO_wrong_ship.csv',
'fitted_ind_params_summary_2021_09_14_02_21_18_niter_4000_HC_NT_foerde_alter_2_JO_wrong_ship.csv',
'fitted_ind_params_summary_2021_09_14_03_55_18_niter_4000_HC_BID_foerde_alter_2_JO_wrong_ship.csv')
for (f in 1:length(param_sum_filenames)){
fitted_par_sum <- read.csv(paste("output/params/CSV/2/",param_sum_filenames[f],sep=''), header = T)
thetas <- matrix(0, ncol = NS, nrow = NP);
fitted_par_sum$X<-NULL
if ("w" %in% names(fitted_par_sum)){
fitted_par_sum$w<-NULL
}
MU = as.numeric(fitted_par_sum[1,])
SIG = diag(as.numeric(fitted_par_sum[2,]))
thetas_corr = matrix(0, ncol = NP , nrow = seed_num);
thetas_corr = data.frame(thetas_corr)
colnames(thetas_corr)<-model_par_names
for (seed in 1:length(seeds)){
time_run=date.time.append('')
set.seed(seeds[seed]);
thetas = mvrnorm(n=NS, mu=MU, Sigma=SIG);
thetas[,4]=matrix(sapply(thetas[,4], function(x) min(max(x,L+rnorm(1,0,err/10)),U-rnorm(1,0,err/10))),ncol=1,nrow=NS) #manually constrain
thetas[,1:3]=matrix(sapply(thetas[,1:3], function(x) min(max(x,L2+rnorm(1,0,err/10)),U2-rnorm(1,0,err/10))),ncol=3,nrow=NS) #manually constrain
print(paste('Drawn parameters for seed:',seeds[seed],'for',param_sum_filenames[f]))
simulate_data <-dget(simulate_name)
output = simulate_data(NT,NS,thetas)
print(paste('Simulated fake data for seed:',seeds[seed],'for',param_sum_filenames[f]))
missing_choices = array(0,dim=c(NS,NT,2))
missing_rewards = array(0,dim=c(NS,NT))
stan_list=list(nS=NS,nT=NT,choice=output$choices,state_2=output$states,reward=output$rewards,
missing_choice=missing_choices,missing_reward=missing_rewards)
HBA_fit=stan(file=model_name,data=stan_list,verbose=FALSE,save_warmup=FALSE,
pars=c('lp_','prev_choice','tran_count','tran_type','Q_TD','Q_MB','Q_2','delta_1','delta_2'),include=FALSE,
iter=n_iter,control=list(adapt_delta=0.99,stepsize=.01))
print(paste('Fit fake data for seed:',seeds[seed],'for',param_sum_filenames[f]))
fitted_ind_params = list();
for (j in 1:length(model_par_names)){
fitted_ind_params[[length(fitted_ind_params)+1]] <-summary(HBA_fit,pars=model_par_names[j])$summary[,'mean']
}
fitted = data.frame(fitted_ind_params)
rownames(fitted)<-NULL
colnames(fitted)<-model_par_names
simulated = data.frame(thetas)
colnames(simulated)<-model_par_names
for (p in 1:NP){
thetas_corr[seed,p]=cor(fitted[,p],simulated[,p])
}
print(thetas_corr[seed,])
if (save_outputs){
write.csv(simulated,file=paste("output/recovery/2/","recovery_sim_params_seed_",seeds[seed],'_','itern_',n_iter,'_',time_run,'_from',param_sum_filenames[f],'.csv',sep=''),row.names=FALSE)
write.csv(fitted,file=paste("output/recovery/2/","recovery_fit_params_seed_",seeds[seed],'_','itern_',n_iter,'_',time_run,'_from',param_sum_filenames[f],'.csv',sep=''),row.names=FALSE)
write.csv(thetas_corr[seed,],file=paste("output/recovery/2/","recovery_corr_seed_",seeds[seed],'_','itern_',n_iter,'_',time_run,'_from',param_sum_filenames[f],'.csv',sep=''),row.names=FALSE)
}
}
mean_corr = apply(thetas_corr,2,mean)
sd_corr = apply(thetas_corr,2,sd)
theta_corr_summary = data.frame(mean_corr,sd_corr)
names(theta_corr_summary)<-c("mean",'std')
if (save_outputs){
time_saved=date.time.append('');
write.csv(thetas_corr,file=paste("output/recovery/2/","recovery_corr_all_",time_saved,'_seedn_',seed_num,'itern_',n_iter,'_from',param_sum_filenames[f],'.csv',sep=''),row.names=FALSE)
write.csv(theta_corr_summary,file=paste("output/recovery/2/","recovery_corr_summary",time_saved,'_seedn_',seed_num,'itern_',n_iter,'_from',param_sum_filenames[f],'.csv',sep=''),row.names=FALSE)
}
print(paste('correlations for: ',param_sum_filenames[f],sep=''))
print(thetas_corr)
print(paste('mean for: ',param_sum_filenames[f],sep=''))
print(theta_corr_summary$mean)
print(paste('standard deviation for: ',param_sum_filenames[f],sep=''))
print(theta_corr_summary$std)
set.seed(NULL)
}
setwd("~/Google Drive/Academia/manuscripts/code/mbl_edbi_manuscript_v2/R_results_analysis/fitted_param_analysis") #from JO
library(lme4)
library(lmerTest) # for regression functions
results_nt_ed = read.table(Sys.glob(file.path('stan_fitted/2/', "*ED_NT*.csv")),sep=",",header=T)
results_tr_ed = read.table(Sys.glob(file.path('stan_fitted/2/', "*ED_BID*.csv")),sep=",",header=T)
results_nt_hc = read.table(Sys.glob(file.path('stan_fitted/2/', "*HC_NT*.csv")),sep=",",header=T)
results_tr_hc = read.table(Sys.glob(file.path('stan_fitted/2/', "*HC_BID*.csv")),sep=",",header=T)
data_all=rbind(results_nt_ed,results_tr_ed,results_nt_hc,results_tr_hc)
# data_delta_w_ED=cbind(results_tr_ed$w-results_nt_ed$w,results_tr_ed[,c(7,8,10,11)])
# colnames(data_delta_w_ED)[1]<-'delta_w'
# data_delta_w_HC=cbind(results_tr_hc$w-results_nt_hc$w,results_tr_hc[,c(7,8,10,11)])
# colnames(data_delta_w_HC)[1]<-'delta_w'
# data_delta_w=rbind(data_delta_w_HC,data_delta_w_ED)
data_all$age_z = rep(0,dim(data_all)[1])
# for (i in data_all$sub){
#   locator_temp0=which(data_all$sub==i)
#   locator_temp=which(data_all$condition=='NT' & data_all$group==unique(data_all$group[data_all$sub==i]))
#   data_all[locator_temp0,]$age_z = (data_all[locator_temp0,]$age-mean(data_all[locator_temp,]$age,na.rm = TRUE))/sd(data_all[locator_temp,]$age,na.rm=TRUE)
# }
for (i in unique(data_all$sub)){
locator_temp0=which(data_all$sub==i)
locator_temp=which(data_all$condition=='NT')
data_all[locator_temp0,]$age_z = (data_all[locator_temp0,]$age-mean(data_all[locator_temp,]$age,na.rm = TRUE))/sd(data_all[locator_temp,]$age,na.rm=TRUE)
}
data_all$group=factor(data_all$group)
data_all$condition=factor(data_all$condition)
data_all$cond_order=factor(data_all$cond_order)
data_all$group = relevel(data_all$group, ref="HC")
data_all$cond_order = relevel(data_all$cond_order, ref="NTfirst")
data_all$condition = relevel(data_all$condition, ref="NT")
model_MB <- lmer(beta_1_MB~group*condition+age_z+(1|sub),data=data_all)
summary(model_MB)
model_MF <- lmer(beta_1_MF~group*condition+age_z+(1|sub),data=data_all)
summary(model_MF)
setwd("~/Google Drive/Academia/manuscripts/code/mbl_edbi_manuscript_v2/R_results_analysis/fitted_param_analysis") #from JO
library(lme4)
library(lmerTest) # for regression functions
results_nt_ed = read.table(Sys.glob(file.path('stan_fitted/2/', "*ED_NT*.csv")),sep=",",header=T)
results_tr_ed = read.table(Sys.glob(file.path('stan_fitted/2/', "*ED_BID*.csv")),sep=",",header=T)
results_nt_hc = read.table(Sys.glob(file.path('stan_fitted/2/', "*HC_NT*.csv")),sep=",",header=T)
results_tr_hc = read.table(Sys.glob(file.path('stan_fitted/2/', "*HC_BID*.csv")),sep=",",header=T)
data_all=rbind(results_nt_ed,results_tr_ed,results_nt_hc,results_tr_hc)
# data_delta_w_ED=cbind(results_tr_ed$w-results_nt_ed$w,results_tr_ed[,c(7,8,10,11)])
# colnames(data_delta_w_ED)[1]<-'delta_w'
# data_delta_w_HC=cbind(results_tr_hc$w-results_nt_hc$w,results_tr_hc[,c(7,8,10,11)])
# colnames(data_delta_w_HC)[1]<-'delta_w'
# data_delta_w=rbind(data_delta_w_HC,data_delta_w_ED)
data_all$age_z = rep(0,dim(data_all)[1])
# for (i in data_all$sub){
#   locator_temp0=which(data_all$sub==i)
#   locator_temp=which(data_all$condition=='NT' & data_all$group==unique(data_all$group[data_all$sub==i]))
#   data_all[locator_temp0,]$age_z = (data_all[locator_temp0,]$age-mean(data_all[locator_temp,]$age,na.rm = TRUE))/sd(data_all[locator_temp,]$age,na.rm=TRUE)
# }
for (i in unique(data_all$sub)){
locator_temp0=which(data_all$sub==i)
locator_temp=which(data_all$condition=='NT')
data_all[locator_temp0,]$age_z = (data_all[locator_temp0,]$age-mean(data_all[locator_temp,]$age,na.rm = TRUE))/sd(data_all[locator_temp,]$age,na.rm=TRUE)
}
data_all$group=factor(data_all$group)
data_all$condition=factor(data_all$condition)
data_all$cond_order=factor(data_all$cond_order)
data_all$group = relevel(data_all$group, ref="HC")
data_all$cond_order = relevel(data_all$cond_order, ref="NTfirst")
data_all$condition = relevel(data_all$condition, ref="NT")
# #---------------- Add qs data
# ppt_qs_data = read.table('ppt_data/qs_scores.csv',sep=",",header=T)
# data_all$eat26_z = rep(0,dim(data_all)[1])
# data_all$aai_z = rep(0,dim(data_all)[1])
# data_all$ocir_z = rep(0,dim(data_all)[1])
#
# for (i in unique(data_all$sub)){
#   locator_temp0=which(data_all$sub==i)
#   locator_temp=which(ppt_qs_data$sub==i)
#   data_all[locator_temp0,]$eat26_z = (ppt_qs_data[locator_temp,]$EAT_26-mean(ppt_qs_data$EAT_26,na.rm = TRUE))/sd(ppt_qs_data$EAT_26,na.rm=TRUE)
#   data_all[locator_temp0,]$aai_z = (ppt_qs_data[locator_temp,]$AAI-mean(ppt_qs_data$AAI,na.rm = TRUE))/sd(ppt_qs_data$AAI,na.rm=TRUE)
#   data_all[locator_temp0,]$ocir_z = (ppt_qs_data[locator_temp,]$OCI_R-mean(ppt_qs_data$AAI,na.rm = TRUE))/sd(ppt_qs_data$OCI_R,na.rm=TRUE)
# }
#
# #Deltaw
# data_delta_w$age_z = rep(0,dim(data_delta_w)[1])
# data_delta_w$eat26_z = rep(0,dim(data_delta_w)[1])
# data_delta_w$aai_z = rep(0,dim(data_delta_w)[1])
# data_delta_w$ocir_z = rep(0,dim(data_delta_w)[1])
# for (i in data_delta_w$sub){
#   data_delta_w[data_delta_w$sub==i,]$age_z=unique(data_all[data_all$sub==i,]$age_z)
#   data_delta_w[data_delta_w$sub==i,]$eat26_z=unique(data_all[data_all$sub==i,]$eat26_z)
#   data_delta_w[data_delta_w$sub==i,]$aai_z=unique(data_all[data_all$sub==i,]$aai_z)
#   data_delta_w[data_delta_w$sub==i,]$ocir_z=unique(data_all[data_all$sub==i,]$ocir_z)
# }
#
# data_delta_w$group=factor(data_delta_w$group)
# data_delta_w$cond_order=factor(data_delta_w$cond_order)
#
# data_delta_w$group = relevel(data_delta_w$group, ref="HC")
# data_delta_w$cond_order = relevel(data_delta_w$cond_order, ref="NTfirst")
save_outputs = TRUE;
model_MB <- lmer(beta_1_MB~group*condition+age_z+(1|sub),data=data_all)
summary(model_MB)
if (save_outputs){
sink("model_summaries/2/model_MB_summary.txt")
print(summary(model_MB))
sink()
}
model_MF <- lmer(beta_1_MF~group*condition+age_z+(1|sub),data=data_all)
summary(model_MF)
if (save_outputs){
sink("model_summaries/2/model_MF_summary.txt")
print(summary(model_MF))
sink()
}
model_alpha <- lmer(alpha~group*condition+age_z+(1|sub),data=data_all)
summary(model_alpha)
if (save_outputs){
sink("model_summaries/2/model_alpha_summary.txt")
print(summary(model_alpha))
sink()
}
model_beta_2 <- lmer(beta_2~group*condition+age_z+(1|sub),data=data_all)
summary(model_beta_2)
if (save_outputs){
sink("model_summaries/2/model_beta_2_summary.txt")
print(summary(model_beta_2))
sink()
}
model_pers <- lmer(pers~group*condition+age_z+(1|sub),data=data_all)
summary(model_pers)
if (save_outputs){
sink("model_summaries/2/model_pers_summary.txt")
print(summary(model_pers))
sink()
}
model_w <- lmer(w~group*condition+age_z+(1|sub),data=data_all)
summary(model_w)
if (save_outputs){
sink("model_summaries/2/model_w_summary.txt")
print(summary(model_w))
sink()
}
setwd("~/Google Drive/Academia/manuscripts/code/mbl_edbi_manuscript_v2/R_stan_fit/") #from JO
library(MASS)
library(boot)
library(Rlab)
library(abind)
library(rstan)
library(shinystan)
library(loo)
library(useful)
library(Rpdb)
library(tidyverse)
rstan_options(auto_write = FALSE)
options(mc.cores =  parallel::detectCores())
seed_num = 10;
n_iter = 2000;
save_outputs = TRUE
seeds = sample(1:6000,size=seed_num);
err = 1e-2;
L=0+err;
U=1-err;
L2=0+err;
U2=1000-err;
NS = 36; #number of subjects
NT = 150; #number of trials
NP = 5; #number of parameters
model_name = 'foerde_alter_2_JO.stan';
simulate_name = 'simulate_data_2_alter.R';
model_par_names=c("beta_1_MB","beta_1_MF","beta_2","alpha", "pers")
# param_sum_filenames = c('fitted_ind_params_summary_2021_09_09_02_06_39_niter_4000_ED_NT_foerde_alter_JO_wrong_ship.csv',
#                         'fitted_ind_params_summary_2021_09_09_03_35_02_niter_4000_ED_BID_foerde_alter_JO_wrong_ship.csv',
#                         'fitted_ind_params_summary_2021_09_09_05_00_16_niter_4000_HC_NT_foerde_alter_JO_wrong_ship.csv',
#                         'fitted_ind_params_summary_2021_09_09_06_38_21_niter_4000_HC_BID_foerde_alter_JO_wrong_ship.csv')
param_sum_filenames = c('fitted_ind_params_summary_2021_09_13_23_15_27_niter_4000_ED_NT_foerde_alter_2_JO_wrong_ship.csv',
'fitted_ind_params_summary_2021_09_14_00_52_02_niter_4000_ED_BID_foerde_alter_2_JO_wrong_ship.csv',
'fitted_ind_params_summary_2021_09_14_02_21_18_niter_4000_HC_NT_foerde_alter_2_JO_wrong_ship.csv',
'fitted_ind_params_summary_2021_09_14_03_55_18_niter_4000_HC_BID_foerde_alter_2_JO_wrong_ship.csv')
for (f in 1:length(param_sum_filenames)){
fitted_par_sum <- read.csv(paste("output/params/CSV/2/",param_sum_filenames[f],sep=''), header = T)
thetas <- matrix(0, ncol = NS, nrow = NP);
fitted_par_sum$X<-NULL
if ("w" %in% names(fitted_par_sum)){
fitted_par_sum$w<-NULL
}
MU = as.numeric(fitted_par_sum[1,])
SIG = diag(as.numeric(fitted_par_sum[2,]))
thetas_corr = matrix(0, ncol = NP , nrow = seed_num);
thetas_corr = data.frame(thetas_corr)
colnames(thetas_corr)<-model_par_names
for (seed in 1:length(seeds)){
time_run=date.time.append('')
set.seed(seeds[seed]);
thetas = mvrnorm(n=NS, mu=MU, Sigma=SIG);
thetas[,4]=matrix(sapply(thetas[,4], function(x) min(max(x,L+rnorm(1,0,err/10)),U-rnorm(1,0,err/10))),ncol=1,nrow=NS) #manually constrain
thetas[,1:3]=matrix(sapply(thetas[,1:3], function(x) min(max(x,L2+rnorm(1,0,err/10)),U2-rnorm(1,0,err/10))),ncol=3,nrow=NS) #manually constrain
print(paste('Drawn parameters for seed:',seeds[seed],'for',param_sum_filenames[f]))
simulate_data <-dget(simulate_name)
output = simulate_data(NT,NS,thetas)
print(paste('Simulated fake data for seed:',seeds[seed],'for',param_sum_filenames[f]))
missing_choices = array(0,dim=c(NS,NT,2))
missing_rewards = array(0,dim=c(NS,NT))
stan_list=list(nS=NS,nT=NT,choice=output$choices,state_2=output$states,reward=output$rewards,
missing_choice=missing_choices,missing_reward=missing_rewards)
HBA_fit=stan(file=model_name,data=stan_list,verbose=FALSE,save_warmup=FALSE,
pars=c('lp_','prev_choice','tran_count','tran_type','Q_TD','Q_MB','Q_2','delta_1','delta_2'),include=FALSE,
iter=n_iter,control=list(adapt_delta=0.99,stepsize=.01))
print(paste('Fit fake data for seed:',seeds[seed],'for',param_sum_filenames[f]))
fitted_ind_params = list();
for (j in 1:length(model_par_names)){
fitted_ind_params[[length(fitted_ind_params)+1]] <-summary(HBA_fit,pars=model_par_names[j])$summary[,'mean']
}
fitted = data.frame(fitted_ind_params)
rownames(fitted)<-NULL
colnames(fitted)<-model_par_names
simulated = data.frame(thetas)
colnames(simulated)<-model_par_names
for (p in 1:NP){
thetas_corr[seed,p]=cor(fitted[,p],simulated[,p])
}
print(thetas_corr[seed,])
if (save_outputs){
write.csv(simulated,file=paste("output/recovery/2/","recovery_sim_params_seed_",seeds[seed],'_','itern_',n_iter,'_',time_run,'_from',param_sum_filenames[f],'.csv',sep=''),row.names=FALSE)
write.csv(fitted,file=paste("output/recovery/2/","recovery_fit_params_seed_",seeds[seed],'_','itern_',n_iter,'_',time_run,'_from',param_sum_filenames[f],'.csv',sep=''),row.names=FALSE)
write.csv(thetas_corr[seed,],file=paste("output/recovery/2/","recovery_corr_seed_",seeds[seed],'_','itern_',n_iter,'_',time_run,'_from',param_sum_filenames[f],'.csv',sep=''),row.names=FALSE)
}
}
mean_corr = apply(thetas_corr,2,mean)
sd_corr = apply(thetas_corr,2,sd)
theta_corr_summary = data.frame(mean_corr,sd_corr)
names(theta_corr_summary)<-c("mean",'std')
if (save_outputs){
time_saved=date.time.append('');
write.csv(thetas_corr,file=paste("output/recovery/2/","recovery_corr_all_",time_saved,'_seedn_',seed_num,'itern_',n_iter,'_from',param_sum_filenames[f],'.csv',sep=''),row.names=FALSE)
write.csv(theta_corr_summary,file=paste("output/recovery/2/","recovery_corr_summary",time_saved,'_seedn_',seed_num,'itern_',n_iter,'_from',param_sum_filenames[f],'.csv',sep=''),row.names=FALSE)
}
print(paste('correlations for: ',param_sum_filenames[f],sep=''))
print(thetas_corr)
print(paste('mean for: ',param_sum_filenames[f],sep=''))
print(theta_corr_summary$mean)
print(paste('standard deviation for: ',param_sum_filenames[f],sep=''))
print(theta_corr_summary$std)
set.seed(NULL)
}
