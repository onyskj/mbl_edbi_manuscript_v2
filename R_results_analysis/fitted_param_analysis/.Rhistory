ind_info_list_group = c()
ind_info_list_condition = c()
ind_info_list_age = c()
ind_info_list_cond_order = c()
NS
nS
s
s
subjs_list
subjs_list[[i]][s]
data_list[[i]]$sub
data_list[[i]][data_list[[i]]$sub==subjs_list[[i]][s],]
subjs_list[[i]][s]
data_list[[i]]$sub
unique(data_all[data_all$condition=="BID",]$sub)
subjs_list
subjs_nt
subjs_bid
data_list = list(data_nt,data_bid)
data_list[[1]]
data_list[[i]]$sub
unique(data_list[[i]]$sub)
# Load data ---------------
data_all = read.csv("collected_data/all_subjects.csv", header = T)
data_nt = data_all[data_all$condition=="NT",]
subjs_nt = unique(data_all[data_all$condition=="NT",]$sub) #NT subjects
data_bid = data_all[data_all$condition=="BID",]
subjs_bid = unique(data_all[data_all$condition=="BID",]$sub) # BID subjects
data_list = list(data_nt,data_bid)
subjs_list = list(subjs_nt,subjs_bid)
# subjs_list = list(subjs)
list_names = c("NT","BID")
# Set which models and datasets to use ---------------
test_bool = FALSE;
model_name = 'foerde_alter_2_JO.stan';
model_name_short='foerde_alter_2_JO_wrong_ship';
if (test_bool){
model_name_short=paste(model_name_short,'test',sep='_')
}
model_par_names=c("beta_1_MB","beta_1_MF","beta_2","alpha", "pers")
with_w=c('foerde_alter_JO.stan','foerde_alter_2_JO.stan')
if (model_name %in% with_w){
model_par_names_full=c(model_par_names,"w")
}
# sets = 1:length(data_list);
# sets = 1:4
sets = 1:2
save_outputs = TRUE;
# Prepare data for stan ---------------
nT=150
stan_lists = list()
info_lists = list()
for (i in sets){
nS=length(subjs_list[[i]])
choice=array(0,dim=c(nS,nT,2))
state=array(0,dim=c(nS,nT))
reward=array(0,dim=c(nS,nT))
missing_choice=array(0,dim=c(nS,nT,2))
missing_reward=array(0,dim=c(nS,nT))
ind_info_list_sub = c()
ind_info_list_group = c()
ind_info_list_condition = c()
ind_info_list_age = c()
ind_info_list_cond_order = c()
for (s in 1:nS) {
subj_data=data_list[[i]][data_list[[i]]$sub==subjs_list[[i]][s],]
choice[s,1:nT,1]=subj_data$ch1-1
choice[s,1:nT,2]=subj_data$ch2-1
state[s,1:nT]=subj_data$st-1
reward[s,1:nT]=subj_data$r
miss_c1_ind=which(is.na(subj_data$ch1))
miss_c2_ind=which(is.na(subj_data$ch2))
miss_rew_ind=which(is.na(subj_data$r))
choice[s,miss_c1_ind,1]=0
choice[s,miss_c2_ind,2]=0
reward[s,miss_rew_ind]=0
state[s,miss_c2_ind]=1
missing_choice[s,miss_c1_ind,1]=1
missing_choice[s,miss_c2_ind,2]=1
missing_reward[s,miss_rew_ind]=1
ind_info_list_sub[length(ind_info_list_sub)+1]=unique(subj_data$sub)
ind_info_list_group[length(ind_info_list_group)+1]=unique(subj_data$group)
ind_info_list_condition[length(ind_info_list_condition)+1]=unique(subj_data$condition)
ind_info_list_age[length(ind_info_list_age)+1]=unique(subj_data$age)
ind_info_list_cond_order[length(ind_info_list_cond_order)+1]=unique(subj_data$cond_order)
}
ind_stan_list=list(set=list_names[i],nS=nS,nT=nT,choice=choice,state_2=state,reward=reward,
missing_choice=missing_choice,missing_reward=missing_reward)
ind_info_list=list(sub=ind_info_list_sub,group=ind_info_list_group,condition=ind_info_list_condition,age=ind_info_list_age, cond_order=ind_info_list_cond_order)
stan_lists[[i]]<-ind_stan_list
info_lists[[i]]<-ind_info_list
}
# Fit the data----
# iters = 4000;
iters = 10;
HBA_fits = list();
fitted_params = list();
fitted_params_summary = list(); #mean and sd
for (i in sets){
print(paste('started fitting data for',list_names[i],'with',model_name_short))
HBA_ind_fit = stan(file=model_name,data=stan_lists[[i]],verbose=FALSE,save_warmup=FALSE,
pars=c('lp_','prev_choice','tran_count','tran_type','Q_TD','Q_MB','Q_2','delta_1','delta_2'),include=FALSE,
iter=iters,control=list(adapt_delta=0.99,stepsize=.01))
print(paste('done fitting data for',list_names[i],'with',model_name_short))
HBA_fits[[length(HBA_fits)+1]]<-HBA_ind_fit
if (save_outputs){ # iters>=1000 &&
saveRDS(HBA_ind_fit,file=paste("output/HB_fits/joint/",date.time.append("HBA_ind_fit"),'_niter_',iters,'_',list_names[i],'_',model_name_short,'.rds',sep=''))
print(paste('done saving fitted parameters for',list_names[i],'with',model_name_short))
}
fitted_ind_params = list();
for (j in 1:length(model_par_names)){
fitted_ind_params[[length(fitted_ind_params)+1]] <-summary(HBA_ind_fit,pars=model_par_names[j])$summary[,'mean']
}
if (model_name %in% with_w){
fitted_ind_params[[length(fitted_ind_params)+1]] <-fitted_ind_params[[1]]/(fitted_ind_params[[1]]+fitted_ind_params[[2]])
names(fitted_ind_params[[length(model_par_names)+1]]) <- sub("beta_1_MB", "w", names(fitted_ind_params[[length(model_par_names)+1]]))
}
fitted_params[[length(fitted_params)+1]] <-fitted_ind_params
fitted_params_ind_summary = list()
for (j in 1:length(model_par_names_full)){
fitted_params_ind_summary[[length(fitted_params_ind_summary)+1]]=c(mean(fitted_params[[length(fitted_params)]][[j]]),sd(fitted_params[[length(fitted_params)]][[j]]))
}
names(fitted_params_ind_summary)<-model_par_names_full
fitted_params_summary[[length(fitted_params_summary)+1]]=fitted_params_ind_summary
fitted_params_ind_summary_df = data.frame(fitted_params_ind_summary)
names(fitted_params_ind_summary_df)<-model_par_names_full
fitted_ind_params_df<-data.frame(fitted_ind_params)
names(fitted_ind_params_df)<-model_par_names_full
rownames(fitted_ind_params_df)<-NULL
fitted_ind_params_df$sub <- info_lists[[i]]$sub
fitted_ind_params_df$group <- info_lists[[i]]$group
fitted_ind_params_df$condition <- info_lists[[i]]$condition
fitted_ind_params_df$age <- info_lists[[i]]$age
fitted_ind_params_df$cond_order <- info_lists[[i]]$cond_order
if (save_outputs){
saveRDS(fitted_ind_params,file=paste("output/params/RDS/joint/",date.time.append("fitted_ind_params"),'_','niter_',iters,'_',list_names[i],'_',model_name_short,'.rds',sep=''))
saveRDS(fitted_params_ind_summary,file=paste("output/params/RDS/joint/",date.time.append("fitted_params_ind_summary"),'_','niter_',iters,'_',list_names[i],'_',model_name_short,'.rds',sep=''))
write.csv(fitted_params_ind_summary_df,file=paste("output/params/CSV/joint/",date.time.append("fitted_ind_params_summary"),'_','niter_',iters,'_',list_names[i],'_',model_name_short,'.csv',sep=''),row.names=FALSE)
write.csv(fitted_ind_params_df,file=paste("output/params/CSV/joint/",date.time.append("fitted_ind_params_df"),'_',list_names[i],'_','niter_',iters,'_',model_name_short,'.csv',sep=''),row.names=FALSE)
print(paste('saved parameters and parameter summary for',list_names[i],'with',model_name_short))
}
}
# set wd, load packages and functions ---------------
setwd("~/Google Drive/Academia/manuscripts/code/mbl_edbi_manuscript_v2/R_stan_fit/") #from JO
setwd("~/Google Drive/Academia/manuscripts/code/mbl_edbi_manuscript_v2/R_stan_fit/") #from JO
library(MASS)
library(boot)
library(Rlab)
library(abind)
library(rstan)
library(shinystan)
library(loo)
library(useful)
library(Rpdb)
library(tidyverse)
rstan_options(auto_write = FALSE)
options(mc.cores =  parallel::detectCores())
seed_num = 10;
n_iter = 2000;
save_outputs = TRUE
seeds = sample(1:6000,size=seed_num);
err = 1e-2;
L=0+err;
U=1-err;
L2=0+err;
U2=1000-err;
NS = 36; #number of subjects
NT = 150; #number of trials
NP = 5; #number of parameters
model_name = 'foerde_alter_2_JO.stan';
simulate_name = 'simulate_data_2_alter.R';
model_par_names=c("beta_1_MB","beta_1_MF","beta_2","alpha", "pers")
# param_sum_filenames = c('fitted_ind_params_summary_2021_09_09_02_06_39_niter_4000_ED_NT_foerde_alter_JO_wrong_ship.csv',
#                         'fitted_ind_params_summary_2021_09_09_03_35_02_niter_4000_ED_BID_foerde_alter_JO_wrong_ship.csv',
#                         'fitted_ind_params_summary_2021_09_09_05_00_16_niter_4000_HC_NT_foerde_alter_JO_wrong_ship.csv',
#                         'fitted_ind_params_summary_2021_09_09_06_38_21_niter_4000_HC_BID_foerde_alter_JO_wrong_ship.csv')
param_sum_filenames = c('fitted_ind_params_summary_2021_09_13_23_15_27_niter_4000_ED_NT_foerde_alter_2_JO_wrong_ship.csv',
'fitted_ind_params_summary_2021_09_14_00_52_02_niter_4000_ED_BID_foerde_alter_2_JO_wrong_ship.csv',
'fitted_ind_params_summary_2021_09_14_02_21_18_niter_4000_HC_NT_foerde_alter_2_JO_wrong_ship.csv',
'fitted_ind_params_summary_2021_09_14_03_55_18_niter_4000_HC_BID_foerde_alter_2_JO_wrong_ship.csv')
param_sum_filenames = c('fitted_ind_params_summary_2021_09_17_20_43_18_niter_10_BID_foerde_alter_2_JO_wrong_ship.csv',
'fitted_ind_params_summary_2021_09_17_19_43_06_niter_10_NT_foerde_alter_2_JO_wrong_ship.csv')
f=1
param_sum_filenames[f]
fitted_par_sum
NS =
fitted_par_sum <- read.csv(paste("output/params/CSV/2/",param_sum_filenames[f],sep=''), header = T)
NS =
fitted_par_sum <- read.csv(paste("output/params/CSV/joint/",param_sum_filenames[f],sep=''), header = T)
fitted_par_sum
param_df_filenames = c('fitted_ind_params_df_2021_09_17_20_43_18_BID_niter_10_foerde_alter_2_JO_wrong_ship',
'fitted_ind_params_df_2021_09_17_19_43_06_NT_niter_10_foerde_alter_2_JO_wrong_ship.csv')
NS =
fitted_par_sum <- read.csv(paste("output/params/CSV/joint/",param_sum_filenames[f],sep=''), header = T)
fitted_par_df <- read.csv(paste("output/params/CSV/joint/",param_df_filenames[f],sep=''), header = T)
param_df_filenames = c('fitted_ind_params_df_2021_09_17_20_43_18_BID_niter_10_foerde_alter_2_JO_wrong_ship.csv',
'fitted_ind_params_df_2021_09_17_19_43_06_NT_niter_10_foerde_alter_2_JO_wrong_ship.csv')
fitted_par_df <- read.csv(paste("output/params/CSV/joint/",param_df_filenames[f],sep=''), header = T)
fitted_par_df
dim(fitted_par_df)
dim(fitted_par_df)[1]
dim(fitted_par_df)[1]
setwd("~/Google Drive/Academia/manuscripts/code/mbl_edbi_manuscript_v2/R_stan_fit/") #from JO
library(MASS)
library(boot)
library(Rlab)
library(abind)
library(rstan)
library(shinystan)
library(loo)
library(useful)
library(Rpdb)
library(tidyverse)
rstan_options(auto_write = FALSE)
options(mc.cores =  parallel::detectCores())
seed_num = 10;
n_iter = 2000;
seed_num = 2;
n_iter = 5;
save_outputs = TRUE
seeds = sample(1:6000,size=seed_num);
err = 1e-3;
L=0+err;
U=1-err;
L2=0+err;
U2=1000-err;
# NS = 36; #number of subjects
NT = 150; #number of trials
NP = 5; #number of parameters
model_name = 'foerde_alter_2_JO.stan';
simulate_name = 'simulate_data_2_alter.R';
model_par_names=c("beta_1_MB","beta_1_MF","beta_2","alpha", "pers")
# param_sum_filenames = c('fitted_ind_params_summary_2021_09_09_02_06_39_niter_4000_ED_NT_foerde_alter_JO_wrong_ship.csv',
#                         'fitted_ind_params_summary_2021_09_09_03_35_02_niter_4000_ED_BID_foerde_alter_JO_wrong_ship.csv',
#                         'fitted_ind_params_summary_2021_09_09_05_00_16_niter_4000_HC_NT_foerde_alter_JO_wrong_ship.csv',
#                         'fitted_ind_params_summary_2021_09_09_06_38_21_niter_4000_HC_BID_foerde_alter_JO_wrong_ship.csv')
param_sum_filenames = c('fitted_ind_params_summary_2021_09_13_23_15_27_niter_4000_ED_NT_foerde_alter_2_JO_wrong_ship.csv',
'fitted_ind_params_summary_2021_09_14_00_52_02_niter_4000_ED_BID_foerde_alter_2_JO_wrong_ship.csv',
'fitted_ind_params_summary_2021_09_14_02_21_18_niter_4000_HC_NT_foerde_alter_2_JO_wrong_ship.csv',
'fitted_ind_params_summary_2021_09_14_03_55_18_niter_4000_HC_BID_foerde_alter_2_JO_wrong_ship.csv')
param_sum_filenames = c('fitted_ind_params_summary_2021_09_17_20_43_18_niter_10_BID_foerde_alter_2_JO_wrong_ship.csv',
'fitted_ind_params_summary_2021_09_17_19_43_06_niter_10_NT_foerde_alter_2_JO_wrong_ship.csv')
param_df_filenames = c('fitted_ind_params_df_2021_09_17_20_43_18_BID_niter_10_foerde_alter_2_JO_wrong_ship.csv',
'fitted_ind_params_df_2021_09_17_19_43_06_NT_niter_10_foerde_alter_2_JO_wrong_ship.csv')
for (f in 1:length(param_sum_filenames)){
fitted_par_sum <- read.csv(paste("output/params/CSV/joint/",param_sum_filenames[f],sep=''), header = T)
fitted_par_df <- read.csv(paste("output/params/CSV/joint/",param_df_filenames[f],sep=''), header = T)
NS = dim(fitted_par_df)[1]
thetas <- matrix(0, ncol = NS, nrow = NP);
fitted_par_sum$X<-NULL
if ("w" %in% names(fitted_par_sum)){
fitted_par_sum$w<-NULL
}
MU = as.numeric(fitted_par_sum[1,])
SIG = diag(as.numeric(fitted_par_sum[2,]))
thetas_corr = matrix(0, ncol = NP , nrow = seed_num);
thetas_corr = data.frame(thetas_corr)
colnames(thetas_corr)<-model_par_names
for (seed in 1:length(seeds)){
time_run=date.time.append('')
set.seed(seeds[seed]);
thetas = mvrnorm(n=NS, mu=MU, Sigma=SIG);
thetas[,4]=matrix(sapply(thetas[,4], function(x) min(max(x,L+rnorm(1,0,err/10)),U-rnorm(1,0,err/10))),ncol=1,nrow=NS) #manually constrain
thetas[,1:3]=matrix(sapply(thetas[,1:3], function(x) min(max(x,L2+rnorm(1,0,err/10)),U2-rnorm(1,0,err/10))),ncol=3,nrow=NS) #manually constrain
print(paste('Drawn parameters for seed:',seeds[seed],'for',param_sum_filenames[f]))
simulate_data <-dget(simulate_name)
output = simulate_data(NT,NS,thetas)
print(paste('Simulated fake data for seed:',seeds[seed],'for',param_sum_filenames[f]))
missing_choices = array(0,dim=c(NS,NT,2))
missing_rewards = array(0,dim=c(NS,NT))
stan_list=list(nS=NS,nT=NT,choice=output$choices,state_2=output$states,reward=output$rewards,
missing_choice=missing_choices,missing_reward=missing_rewards)
HBA_fit=stan(file=model_name,data=stan_list,verbose=FALSE,save_warmup=FALSE,
pars=c('lp_','prev_choice','tran_count','tran_type','Q_TD','Q_MB','Q_2','delta_1','delta_2'),include=FALSE,
iter=n_iter,control=list(adapt_delta=0.99,stepsize=.01))
print(paste('Fit fake data for seed:',seeds[seed],'for',param_sum_filenames[f]))
fitted_ind_params = list();
for (j in 1:length(model_par_names)){
fitted_ind_params[[length(fitted_ind_params)+1]] <-summary(HBA_fit,pars=model_par_names[j])$summary[,'mean']
}
fitted = data.frame(fitted_ind_params)
rownames(fitted)<-NULL
colnames(fitted)<-model_par_names
simulated = data.frame(thetas)
colnames(simulated)<-model_par_names
for (p in 1:NP){
thetas_corr[seed,p]=cor(fitted[,p],simulated[,p])
}
print(thetas_corr[seed,])
if (save_outputs){
write.csv(simulated,file=paste("output/recovery/joint/","recovery_sim_params_seed_",seeds[seed],'_','itern_',n_iter,'_',time_run,'_from',param_sum_filenames[f],'.csv',sep=''),row.names=FALSE)
write.csv(fitted,file=paste("output/recovery/joint/","recovery_fit_params_seed_",seeds[seed],'_','itern_',n_iter,'_',time_run,'_from',param_sum_filenames[f],'.csv',sep=''),row.names=FALSE)
write.csv(thetas_corr[seed,],file=paste("output/recovery/joint/","recovery_corr_seed_",seeds[seed],'_','itern_',n_iter,'_',time_run,'_from',param_sum_filenames[f],'.csv',sep=''),row.names=FALSE)
}
}
mean_corr = apply(thetas_corr,2,mean)
sd_corr = apply(thetas_corr,2,sd)
theta_corr_summary = data.frame(mean_corr,sd_corr)
names(theta_corr_summary)<-c("mean",'std')
if (save_outputs){
time_saved=date.time.append('');
write.csv(thetas_corr,file=paste("output/recovery/joint/","recovery_corr_all_",time_saved,'_seedn_',seed_num,'itern_',n_iter,'_from',param_sum_filenames[f],'.csv',sep=''),row.names=FALSE)
write.csv(theta_corr_summary,file=paste("output/recovery/joint/","recovery_corr_summary",time_saved,'_seedn_',seed_num,'itern_',n_iter,'_from',param_sum_filenames[f],'.csv',sep=''),row.names=FALSE)
}
print(paste('correlations for: ',param_sum_filenames[f],sep=''))
print(thetas_corr)
print(paste('mean for: ',param_sum_filenames[f],sep=''))
print(theta_corr_summary$mean)
print(paste('standard deviation for: ',param_sum_filenames[f],sep=''))
print(theta_corr_summary$std)
set.seed(NULL)
}
##################
#
# adapted by Jakub Onysk based on vanessa brown 2018
#
##################
# set wd, load packages and functions ---------------
setwd("~/Google Drive/Academia/manuscripts/code/mbl_edbi_manuscript_v2/R_stan_fit/") #from JO
date.time.append <-dget("date_time_append.R")
library(rstan)
library(shinystan)
library(loo)
library(useful)
library(Rpdb)
library(tidyverse)
library(rlist)
rstan_options(auto_write = FALSE)
options(mc.cores =  parallel::detectCores())
# Load data ---------------
data_all = read.csv("collected_data/all_subjects.csv", header = T)
data_nt = data_all[data_all$condition=="NT",]
subjs_nt = unique(data_all[data_all$condition=="NT",]$sub) #NT subjects
data_bid = data_all[data_all$condition=="BID",]
subjs_bid = unique(data_all[data_all$condition=="BID",]$sub) # BID subjects
# subjs = unique(data_all[data_all$condition=="BID",]$sub)
data_list = list(data_nt,data_bid)
subjs_list = list(subjs_nt,subjs_bid)
# subjs_list = list(subjs)
list_names = c("NT","BID")
# Set which models and datasets to use ---------------
test_bool = FALSE;
model_name = 'foerde_alter_2_JO.stan';
model_name_short='foerde_alter_2_JO_wrong_ship';
if (test_bool){
model_name_short=paste(model_name_short,'test',sep='_')
}
model_par_names=c("beta_1_MB","beta_1_MF","beta_2","alpha", "pers")
with_w=c('foerde_alter_JO.stan','foerde_alter_2_JO.stan')
if (model_name %in% with_w){
model_par_names_full=c(model_par_names,"w")
}
# sets = 1:length(data_list);
# sets = 1:4
sets = 1:2
save_outputs = TRUE;
# Prepare data for stan ---------------
nT=150
stan_lists = list()
info_lists = list()
for (i in sets){
nS=length(subjs_list[[i]])
choice=array(0,dim=c(nS,nT,2))
state=array(0,dim=c(nS,nT))
reward=array(0,dim=c(nS,nT))
missing_choice=array(0,dim=c(nS,nT,2))
missing_reward=array(0,dim=c(nS,nT))
ind_info_list_sub = c()
ind_info_list_group = c()
ind_info_list_condition = c()
ind_info_list_age = c()
ind_info_list_cond_order = c()
for (s in 1:nS) {
subj_data=data_list[[i]][data_list[[i]]$sub==subjs_list[[i]][s],]
choice[s,1:nT,1]=subj_data$ch1-1
choice[s,1:nT,2]=subj_data$ch2-1
state[s,1:nT]=subj_data$st-1
reward[s,1:nT]=subj_data$r
miss_c1_ind=which(is.na(subj_data$ch1))
miss_c2_ind=which(is.na(subj_data$ch2))
miss_rew_ind=which(is.na(subj_data$r))
choice[s,miss_c1_ind,1]=0
choice[s,miss_c2_ind,2]=0
reward[s,miss_rew_ind]=0
state[s,miss_c2_ind]=1
missing_choice[s,miss_c1_ind,1]=1
missing_choice[s,miss_c2_ind,2]=1
missing_reward[s,miss_rew_ind]=1
ind_info_list_sub[length(ind_info_list_sub)+1]=unique(subj_data$sub)
ind_info_list_group[length(ind_info_list_group)+1]=unique(subj_data$group)
ind_info_list_condition[length(ind_info_list_condition)+1]=unique(subj_data$condition)
ind_info_list_age[length(ind_info_list_age)+1]=unique(subj_data$age)
ind_info_list_cond_order[length(ind_info_list_cond_order)+1]=unique(subj_data$cond_order)
}
ind_stan_list=list(set=list_names[i],nS=nS,nT=nT,choice=choice,state_2=state,reward=reward,
missing_choice=missing_choice,missing_reward=missing_reward)
ind_info_list=list(sub=ind_info_list_sub,group=ind_info_list_group,condition=ind_info_list_condition,age=ind_info_list_age, cond_order=ind_info_list_cond_order)
stan_lists[[i]]<-ind_stan_list
info_lists[[i]]<-ind_info_list
}
# Fit the data----
iters = 4000;
# iters = 10;
HBA_fits = list();
fitted_params = list();
fitted_params_summary = list(); #mean and sd
for (i in sets){
print(paste('started fitting data for',list_names[i],'with',model_name_short))
HBA_ind_fit = stan(file=model_name,data=stan_lists[[i]],verbose=FALSE,save_warmup=FALSE,
pars=c('lp_','prev_choice','tran_count','tran_type','Q_TD','Q_MB','Q_2','delta_1','delta_2'),include=FALSE,
iter=iters,control=list(adapt_delta=0.99,stepsize=.01))
print(paste('done fitting data for',list_names[i],'with',model_name_short))
HBA_fits[[length(HBA_fits)+1]]<-HBA_ind_fit
if (save_outputs){ # iters>=1000 &&
saveRDS(HBA_ind_fit,file=paste("output/HB_fits/joint/",date.time.append("HBA_ind_fit"),'_niter_',iters,'_',list_names[i],'_',model_name_short,'.rds',sep=''))
print(paste('done saving fitted parameters for',list_names[i],'with',model_name_short))
}
fitted_ind_params = list();
for (j in 1:length(model_par_names)){
fitted_ind_params[[length(fitted_ind_params)+1]] <-summary(HBA_ind_fit,pars=model_par_names[j])$summary[,'mean']
}
if (model_name %in% with_w){
fitted_ind_params[[length(fitted_ind_params)+1]] <-fitted_ind_params[[1]]/(fitted_ind_params[[1]]+fitted_ind_params[[2]])
names(fitted_ind_params[[length(model_par_names)+1]]) <- sub("beta_1_MB", "w", names(fitted_ind_params[[length(model_par_names)+1]]))
}
fitted_params[[length(fitted_params)+1]] <-fitted_ind_params
fitted_params_ind_summary = list()
for (j in 1:length(model_par_names_full)){
fitted_params_ind_summary[[length(fitted_params_ind_summary)+1]]=c(mean(fitted_params[[length(fitted_params)]][[j]]),sd(fitted_params[[length(fitted_params)]][[j]]))
}
names(fitted_params_ind_summary)<-model_par_names_full
fitted_params_summary[[length(fitted_params_summary)+1]]=fitted_params_ind_summary
fitted_params_ind_summary_df = data.frame(fitted_params_ind_summary)
names(fitted_params_ind_summary_df)<-model_par_names_full
fitted_ind_params_df<-data.frame(fitted_ind_params)
names(fitted_ind_params_df)<-model_par_names_full
rownames(fitted_ind_params_df)<-NULL
fitted_ind_params_df$sub <- info_lists[[i]]$sub
fitted_ind_params_df$group <- info_lists[[i]]$group
fitted_ind_params_df$condition <- info_lists[[i]]$condition
fitted_ind_params_df$age <- info_lists[[i]]$age
fitted_ind_params_df$cond_order <- info_lists[[i]]$cond_order
if (save_outputs){
saveRDS(fitted_ind_params,file=paste("output/params/RDS/joint/",date.time.append("fitted_ind_params"),'_','niter_',iters,'_',list_names[i],'_',model_name_short,'.rds',sep=''))
saveRDS(fitted_params_ind_summary,file=paste("output/params/RDS/joint/",date.time.append("fitted_params_ind_summary"),'_','niter_',iters,'_',list_names[i],'_',model_name_short,'.rds',sep=''))
write.csv(fitted_params_ind_summary_df,file=paste("output/params/CSV/joint/",date.time.append("fitted_ind_params_summary"),'_','niter_',iters,'_',list_names[i],'_',model_name_short,'.csv',sep=''),row.names=FALSE)
write.csv(fitted_ind_params_df,file=paste("output/params/CSV/joint/",date.time.append("fitted_ind_params_df"),'_',list_names[i],'_','niter_',iters,'_',model_name_short,'.csv',sep=''),row.names=FALSE)
print(paste('saved parameters and parameter summary for',list_names[i],'with',model_name_short))
}
}
setwd("~/Google Drive/Academia/manuscripts/code/mbl_edbi_manuscript_v2/R_results_analysis/fitted_param_analysis") #from JO
library(lme4)
library(lmerTest) # for regression functions
results_nt = read.table(Sys.glob(file.path('stan_fitted/joint/', "*NT*.csv")),sep=",",header=T)
results_tr = read.table(Sys.glob(file.path('stan_fitted/joint/', "*BID*.csv")),sep=",",header=T)
results_nt
data_all=rbind(results_nt,results_tr)
data_all
data_all$age_z = rep(0,dim(data_all)[1])
# for (i in data_all$sub){
#   locator_temp0=which(data_all$sub==i)
#   locator_temp=which(data_all$condition=='NT' & data_all$group==unique(data_all$group[data_all$sub==i]))
#   data_all[locator_temp0,]$age_z = (data_all[locator_temp0,]$age-mean(data_all[locator_temp,]$age,na.rm = TRUE))/sd(data_all[locator_temp,]$age,na.rm=TRUE)
# }
for (i in unique(data_all$sub)){
locator_temp0=which(data_all$sub==i)
locator_temp=which(data_all$condition=='NT')
data_all[locator_temp0,]$age_z = (data_all[locator_temp0,]$age-mean(data_all[locator_temp,]$age,na.rm = TRUE))/sd(data_all[locator_temp,]$age,na.rm=TRUE)
}
data_all
data_all$group=factor(data_all$group)
data_all$condition=factor(data_all$condition)
data_all$cond_order=factor(data_all$cond_order)
data_all$group = relevel(data_all$group, ref="HC")
data_all$cond_order = relevel(data_all$cond_order, ref="NTfirst")
data_all$condition = relevel(data_all$condition, ref="NT")
model_MB <- lmer(beta_1_MB~group*condition+age_z+(1|sub),data=data_all)
summary(model_MB)
model_MF <- lmer(beta_1_MF~group*condition+age_z+(1|sub),data=data_all)
summary(model_MF)
model_w <- lmer(w~group*condition+age_z+(1|sub),data=data_all)
summary(model_w)
model_MB <- lmer(beta_1_MB~group*condition+age_z+(1|sub),data=data_all)
summary(model_MB)
model_MB <- lmer(beta_1_MB~group+age_z+(1|sub),data=data_all)
summary(model_MB)
setwd("~/Google Drive/Academia/manuscripts/code/mbl_edbi_manuscript_v2/R_results_analysis/fitted_param_analysis") #from JO
library(lme4)
library(lmerTest) # for regression functions
results_nt_ed = read.table(Sys.glob(file.path('stan_fitted/', "*ED_NT*.csv")),sep=",",header=T)
results_tr_ed = read.table(Sys.glob(file.path('stan_fitted/', "*ED_BID*.csv")),sep=",",header=T)
results_nt_hc = read.table(Sys.glob(file.path('stan_fitted/', "*HC_NT*.csv")),sep=",",header=T)
results_tr_hc = read.table(Sys.glob(file.path('stan_fitted/', "*HC_BID*.csv")),sep=",",header=T)
data_all=rbind(results_nt_ed,results_tr_ed,results_nt_hc,results_tr_hc)
# data_delta_w_ED=cbind(results_tr_ed$w-results_nt_ed$w,results_tr_ed[,c(7,8,10,11)])
# colnames(data_delta_w_ED)[1]<-'delta_w'
# data_delta_w_HC=cbind(results_tr_hc$w-results_nt_hc$w,results_tr_hc[,c(7,8,10,11)])
# colnames(data_delta_w_HC)[1]<-'delta_w'
# data_delta_w=rbind(data_delta_w_HC,data_delta_w_ED)
data_all$age_z = rep(0,dim(data_all)[1])
for (i in unique(data_all$sub)){
locator_temp0=which(data_all$sub==i)
locator_temp=which(data_all$condition=='NT')
data_all[locator_temp0,]$age_z = (data_all[locator_temp0,]$age-mean(data_all[locator_temp,]$age,na.rm = TRUE))/sd(data_all[locator_temp,]$age,na.rm=TRUE)
}
data_all$group=factor(data_all$group)
data_all$condition=factor(data_all$condition)
data_all$cond_order=factor(data_all$cond_order)
data_all$group = relevel(data_all$group, ref="HC")
data_all$cond_order = relevel(data_all$cond_order, ref="NTfirst")
data_all$condition = relevel(data_all$condition, ref="NT")
model_MB <- lmer(beta_1_MB~group*condition+age_z+(group*condition+1|sub),data=data_all)
