lines(t,Pred_GP$mean+2*Pred_GP$sd, col='blue',lwd=2,lty=2)
lines(t,Pred_GP$mean-2*Pred_GP$sd, col='blue',lwd=2,lty=2)
### Emulating function f(x) = x*sin(x) by Gaussian processes (GP)
### using the package "DiceKriging".
rm(list=ls())  ##  clean R environment
library("DiceKriging")
set.seed(12)
fun <- function(xx) {   ## Define the true function
yy <- xx*sin(xx)
return(yy)
}
LowerBound <- -5
UpperBound <- 5
no.sample <- 2
X <- seq(LowerBound, UpperBound, length.out = no.sample)
Y <- fun(X)  ## Function values at X
### Building GP emulator #######
covtype <- "gauss"   ## Try with "matern5_2", "matern3_2", "exp", "gauss"
GP_model <- km(design = data.frame(X), response = Y, covtype = covtype, nugget = 1e-8,
control = list(trace = FALSE))
### Predicting ###
t <- seq(LowerBound, UpperBound, 0.01)   ## New locations to predict
Pred_GP <- predict(object = GP_model, newdata = data.frame(t), type = "UK", checkNames = FALSE)
par(mfrow = c(1, 1), mar = c(4.2, 4.2, 1, 1))
plot(t, fun(t), type = "l", xlab = "x", ylab = "f", lwd = 2)
lines(t,Pred_GP$mean+2*Pred_GP$sd, col='blue',lwd=2,lty=2)
lines(t,Pred_GP$mean-2*Pred_GP$sd, col='blue',lwd=2,lty=2)
### Emulating function f(x) = x*sin(x) by Gaussian processes (GP)
### using the package "DiceKriging".
rm(list=ls())  ##  clean R environment
library("DiceKriging")
set.seed(12)
fun <- function(xx) {   ## Define the true function
yy <- xx*sin(xx)
return(yy)
}
LowerBound <- -5
UpperBound <- 5
no.sample <- 3
X <- seq(LowerBound, UpperBound, length.out = no.sample)
Y <- fun(X)  ## Function values at X
### Building GP emulator #######
covtype <- "gauss"   ## Try with "matern5_2", "matern3_2", "exp", "gauss"
GP_model <- km(design = data.frame(X), response = Y, covtype = covtype, nugget = 1e-8,
control = list(trace = FALSE))
### Predicting ###
t <- seq(LowerBound, UpperBound, 0.01)   ## New locations to predict
Pred_GP <- predict(object = GP_model, newdata = data.frame(t), type = "UK", checkNames = FALSE)
par(mfrow = c(1, 1), mar = c(4.2, 4.2, 1, 1))
plot(t, fun(t), type = "l", xlab = "x", ylab = "f", lwd = 2)
lines(t,Pred_GP$mean+2*Pred_GP$sd, col='blue',lwd=2,lty=2)
lines(t,Pred_GP$mean-2*Pred_GP$sd, col='blue',lwd=2,lty=2)
points(X, Y, pch = 19, col = "red", cex = 1.3)
### Emulating function f(x) = x*sin(x) by Gaussian processes (GP)
### using the package "DiceKriging".
rm(list=ls())  ##  clean R environment
library("DiceKriging")
set.seed(12)
fun <- function(xx) {   ## Define the true function
yy <- xx*sin(xx)
return(yy)
}
LowerBound <- -5
UpperBound <- 5
no.sample <- 3
X <- seq(LowerBound, UpperBound, length.out = no.sample)
Y <- fun(X)  ## Function values at X
### Building GP emulator #######
covtype <- "gauss"   ## Try with "matern5_2", "matern3_2", "exp", "gauss"
GP_model <- km(design = data.frame(X), response = Y, covtype = covtype, nugget = 1e-8,
control = list(trace = FALSE))
### Predicting ###
t <- seq(LowerBound, UpperBound, 0.01)   ## New locations to predict
Pred_GP <- predict(object = GP_model, newdata = data.frame(t), type = "UK", checkNames = FALSE)
par(mfrow = c(1, 1), mar = c(4.2, 4.2, 1, 1))
plot(t, fun(t), type = "l", xlab = "x", ylab = "f", lwd = 2)
lines(t,Pred_GP$mean+2*Pred_GP$sd, col='blue',lwd=2,lty=2)
lines(t,Pred_GP$mean-2*Pred_GP$sd, col='blue',lwd=2,lty=2)
points(X, Y, pch = 19, col = "red", cex = 1.3)
### Emulating function f(x) = x*sin(x) by Gaussian processes (GP)
### using the package "DiceKriging".
rm(list=ls())  ##  clean R environment
library("DiceKriging")
set.seed(12)
fun <- function(xx) {   ## Define the true function
yy <- xx*sin(xx)
return(yy)
}
LowerBound <- -5
UpperBound <- 5
no.sample <- 3
X <- seq(LowerBound, UpperBound, length.out = no.sample)
Y <- fun(X)  ## Function values at X
### Building GP emulator #######
covtype <- "gauss"   ## Try with "matern5_2", "matern3_2", "exp", "gauss"
GP_model <- km(design = data.frame(X), response = Y, covtype = covtype, nugget = 1e-8,
control = list(trace = FALSE))
### Predicting ###
t <- seq(LowerBound, UpperBound, 0.01)   ## New locations to predict
Pred_GP <- predict(object = GP_model, newdata = data.frame(t), type = "UK", checkNames = FALSE)
par(mfrow = c(1, 1), mar = c(4.2, 4.2, 1, 1))
plot(t, fun(t), type = "l", xlab = "x", ylab = "f", lwd = 2)
lines(t,Pred_GP$mean+2*Pred_GP$sd, col='blue',lwd=2,lty=2)
lines(t,Pred_GP$mean-2*Pred_GP$sd, col='blue',lwd=2,lty=2)
points(X, Y, pch = 19, col = "red", cex = 1.3)
### Emulating function f(x) = x*sin(x) by Gaussian processes (GP)
### using the package "DiceKriging".
rm(list=ls())  ##  clean R environment
library("DiceKriging")
set.seed(12)
fun <- function(xx) {   ## Define the true function
yy <- xx*sin(xx)
return(yy)
}
LowerBound <- -5
UpperBound <- 5
no.sample <- 3
X <- seq(LowerBound, UpperBound, length.out = no.sample)
Y <- fun(X)  ## Function values at X
### Building GP emulator #######
covtype <- "gauss"   ## Try with "matern5_2", "matern3_2", "exp", "gauss"
GP_model <- km(design = data.frame(X), response = Y, covtype = covtype, nugget = 1e-8,
control = list(trace = FALSE))
### Predicting ###
t <- seq(LowerBound, UpperBound, 0.01)   ## New locations to predict
Pred_GP <- predict(object = GP_model, newdata = data.frame(t), type = "UK", checkNames = FALSE)
par(mfrow = c(1, 1), mar = c(4.2, 4.2, 1, 1))
plot(t, fun(t), type = "l", xlab = "x", ylab = "f", lwd = 2)
lines(t,Pred_GP$mean+2*Pred_GP$sd, col='blue',lwd=2,lty=2)
lines(t,Pred_GP$mean-2*Pred_GP$sd, col='blue',lwd=2,lty=2)
points(X, Y, pch = 19, col = "red", cex = 1.3)
### Emulating function f(x) = x*sin(x) by Gaussian processes (GP)
### using the package "DiceKriging".
rm(list=ls())  ##  clean R environment
library("DiceKriging")
set.seed(12)
fun <- function(xx) {   ## Define the true function
yy <- xx*sin(xx)
return(yy)
}
LowerBound <- -5
UpperBound <- 5
no.sample <- 3
X <- seq(LowerBound, UpperBound, length.out = no.sample)
Y <- fun(X)  ## Function values at X
### Building GP emulator #######
covtype <- "gauss"   ## Try with "matern5_2", "matern3_2", "exp", "gauss"
GP_model <- km(design = data.frame(X), response = Y, covtype = covtype, nugget = 1e-8,
control = list(trace = FALSE))
### Predicting ###
t <- seq(LowerBound, UpperBound, 0.01)   ## New locations to predict
Pred_GP <- predict(object = GP_model, newdata = data.frame(t), type = "UK", checkNames = FALSE)
par(mfrow = c(1, 1), mar = c(4.2, 4.2, 1, 1))
plot(t, fun(t), type = "l", xlab = "x", ylab = "f", lwd = 2)
lines(t,Pred_GP$mean+2*Pred_GP$sd, col='blue',lwd=2,lty=2)
lines(t,Pred_GP$mean-2*Pred_GP$sd, col='blue',lwd=2,lty=2)
points(X, Y, pch = 19, col = "red", cex = 1.3)
### Emulating function f(x) = x*sin(x) by Gaussian processes (GP)
### using the package "DiceKriging".
rm(list=ls())  ##  clean R environment
library("DiceKriging")
set.seed(12)
fun <- function(xx) {   ## Define the true function
yy <- xx*sin(xx)
return(yy)
}
LowerBound <- -5
UpperBound <- 5
no.sample <- 3
X <- seq(LowerBound, UpperBound, length.out = no.sample)
Y <- fun(X)  ## Function values at X
### Building GP emulator #######
covtype <- "gauss"   ## Try with "matern5_2", "matern3_2", "exp", "gauss"
GP_model <- km(design = data.frame(X), response = Y, covtype = covtype, nugget = 1e-8,
control = list(trace = FALSE))
### Predicting ###
t <- seq(LowerBound, UpperBound, 0.01)   ## New locations to predict
Pred_GP <- predict(object = GP_model, newdata = data.frame(t), type = "UK", checkNames = FALSE)
par(mfrow = c(1, 1), mar = c(4.2, 4.2, 1, 1))
plot(t, fun(t), type = "l", xlab = "x", ylab = "f", lwd = 2)
lines(t,Pred_GP$mean+2*Pred_GP$sd, col='blue',lwd=2,lty=2)
lines(t,Pred_GP$mean-2*Pred_GP$sd, col='blue',lwd=2,lty=2)
points(X, Y, pch = 19, col = "red", cex = 1.3)
### Emulating function f(x) = x*sin(x) by Gaussian processes (GP)
### using the package "DiceKriging".
rm(list=ls())  ##  clean R environment
library("DiceKriging")
set.seed(12)
fun <- function(xx) {   ## Define the true function
yy <- xx*sin(xx)
return(yy)
}
LowerBound <- -5
UpperBound <- 5
no.sample <- 3
X <- seq(LowerBound, UpperBound, length.out = no.sample)
Y <- fun(X)  ## Function values at X
### Building GP emulator #######
covtype <- "gauss"   ## Try with "matern5_2", "matern3_2", "exp", "gauss"
GP_model <- km(design = data.frame(X), response = Y, covtype = covtype, nugget = 1e-8,
control = list(trace = FALSE))
### Predicting ###
t <- seq(LowerBound, UpperBound, 0.01)   ## New locations to predict
Pred_GP <- predict(object = GP_model, newdata = data.frame(t), type = "UK", checkNames = FALSE)
par(mfrow = c(1, 1), mar = c(4.2, 4.2, 1, 1))
plot(t, fun(t), type = "l", xlab = "x", ylab = "f", lwd = 2)
lines(t,Pred_GP$mean+2*Pred_GP$sd, col='blue',lwd=2,lty=2)
lines(t,Pred_GP$mean-2*Pred_GP$sd, col='blue',lwd=2,lty=2)
points(X, Y, pch = 19, col = "red", cex = 1.3)
source('~/Google Drive/Academia/UNI of Exeter/YEAR3/Maths/math model in bio and med/R/WK7/practice.R')
source('~/Google Drive/Academia/UNI of Exeter/YEAR3/Maths/math model in bio and med/R/WK7/practice.R')
source('~/Google Drive/Academia/UNI of Exeter/YEAR3/Maths/math model in bio and med/R/WK7/practice.R')
source('~/Google Drive/Academia/UNI of Exeter/YEAR3/Maths/math model in bio and med/R/WK7/practice.R')
source('~/Google Drive/Academia/UNI of Exeter/YEAR3/Maths/math model in bio and med/R/WK7/practice.R')
plot(t, fun(t), type = "l", xlab = "x", ylab = "f", lwd = 2,ylim=c(-10,10))
### Emulating function f(x) = x*sin(x) by Gaussian processes (GP)
### using the package "DiceKriging".
rm(list=ls())  ##  clean R environment
library("DiceKriging")
set.seed(12)
fun <- function(xx) {   ## Define the true function
yy <- xx*sin(xx)
return(yy)
}
LowerBound <- -5
UpperBound <- 5
no.sample <- 3
X <- seq(LowerBound, UpperBound, length.out = no.sample)
Y <- fun(X)  ## Function values at X
### Building GP emulator #######
covtype <- "gauss"   ## Try with "matern5_2", "matern3_2", "exp", "gauss"
GP_model <- km(design = data.frame(X), response = Y, covtype = covtype, nugget = 1e-8,
control = list(trace = FALSE))
### Predicting ###
t <- seq(LowerBound, UpperBound, 0.01)   ## New locations to predict
Pred_GP <- predict(object = GP_model, newdata = data.frame(t), type = "UK", checkNames = FALSE)
par(mfrow = c(1, 1), mar = c(4.2, 4.2, 1, 1))
plot(t, fun(t), type = "l", xlab = "x", ylab = "f", lwd = 2,ylim=c(-10,10))
lines(t,Pred_GP$mean+2*Pred_GP$sd, col='blue',lwd=2,lty=2)
lines(t,Pred_GP$mean-2*Pred_GP$sd, col='blue',lwd=2,lty=2)
points(X, Y, pch = 19, col = "red", cex = 1.3)
source('~/Google Drive/Academia/UNI of Exeter/YEAR3/Maths/math model in bio and med/R/WK7/practice.R')
source('~/Google Drive/Academia/UNI of Exeter/YEAR3/Maths/math model in bio and med/R/WK7/practice.R')
source('~/Google Drive/Academia/UNI of Exeter/YEAR3/Maths/math model in bio and med/R/WK7/practice.R')
source('~/Google Drive/Academia/UNI of Exeter/YEAR3/Maths/math model in bio and med/R/WK7/practice.R')
source('~/Google Drive/Academia/UNI of Exeter/YEAR3/Maths/math model in bio and med/R/WK7/practice.R')
source('~/Google Drive/Academia/UNI of Exeter/YEAR3/Maths/math model in bio and med/R/WK7/practice.R')
source('~/Google Drive/Academia/UNI of Exeter/YEAR3/Maths/math model in bio and med/R/WK7/practice.R')
source('~/Google Drive/Academia/UNI of Exeter/YEAR3/Maths/math model in bio and med/R/WK7/practice.R')
source('~/Google Drive/Academia/UNI of Exeter/YEAR3/Maths/math model in bio and med/R/WK7/practice.R')
source('~/Google Drive/Academia/UNI of Exeter/YEAR3/Maths/math model in bio and med/R/WK7/practice.R')
source('~/Google Drive/Academia/UNI of Exeter/YEAR3/Maths/math model in bio and med/R/WK7/practice.R')
source('~/Google Drive/Academia/UNI of Exeter/YEAR3/Maths/math model in bio and med/R/WK7/practice.R')
source('~/Google Drive/Academia/UNI of Exeter/YEAR3/Maths/math model in bio and med/R/WK7/practice.R')
source('~/Google Drive/Academia/UNI of Exeter/YEAR3/Maths/math model in bio and med/R/WK7/practice.R')
source('~/Google Drive/Academia/UNI of Exeter/YEAR3/Maths/math model in bio and med/R/WK7/practice.R')
source('~/Google Drive/Academia/UNI of Exeter/YEAR3/Maths/math model in bio and med/R/WK7/practice.R')
source('~/Google Drive/Academia/UNI of Exeter/YEAR3/Maths/math model in bio and med/R/WK7/practice.R')
source('~/Google Drive/Academia/UNI of Exeter/YEAR3/Maths/math model in bio and med/R/WK7/practice.R')
source('~/Google Drive/Academia/UNI of Exeter/YEAR3/Maths/math model in bio and med/R/WK7/practice.R')
source('~/Google Drive/Academia/UNI of Exeter/YEAR3/Maths/math model in bio and med/R/WK7/practice.R')
legend(x = "bottom", legend = c("True function", "GP prediction", "Credible intervals"),
lty = c(1, 1, 2, 2), col = c("black", rep("blue", 3)), lwd = 2)
source('~/Google Drive/Academia/UNI of Exeter/YEAR3/Maths/math model in bio and med/R/WK7/practice.R')
### Evaluating #######
no.testpoint <- 5
X_t <- runif(n = no.testpoint, min = LowerBound, max = UpperBound)  ## generate uniform random samples
Y_t <- fun(X_t)
Pred_GP_t <- predict(object = GP_model, newdata = data.frame(X_t), type = "UK", checkNames = FALSE)
par(mfrow = c(2, 1), mar = c(4.2, 4.2, 1, 1))
plot(t, fun(t), type = "l", xlab = "x", ylab = "f", lwd = 2)
lines(t, Pred_GP$mean, col = "blue", lwd = 2)
lines(t, Pred_GP$mean + 2*Pred_GP$sd, col = "blue", lwd = 2, lty = 2)
lines(t, Pred_GP$mean - 2*Pred_GP$sd, col = "blue", lwd = 2, lty = 2)
points(X, Y, pch = 19, col = "red", cex = 1.3)
points(X_t, Y_t, pch = 4, cex = 1.2, lwd = 2)
plot(Y_t, Pred_GP_t$mean, xlab = "Exact values", ylab = "Predicted values")
abline(a = 0, b = 1)
plot(t, fun(t), type = "l", xlab = "x", ylab = "f", lwd = 2,ylim=c(-8,8))
no.testpoint <- 5
X_t <- runif(n = no.testpoint, min = LowerBound, max = UpperBound)  ## generate uniform random samples
Y_t <- fun(X_t)
Pred_GP_t <- predict(object = GP_model, newdata = data.frame(X_t), type = "UK", checkNames = FALSE)
par(mfrow = c(2, 1), mar = c(4.2, 4.2, 1, 1))
plot(t, fun(t), type = "l", xlab = "x", ylab = "f", lwd = 2,ylim=c(-8,8))
lines(t, Pred_GP$mean, col = "blue", lwd = 2)
lines(t, Pred_GP$mean + 2*Pred_GP$sd, col = "blue", lwd = 2, lty = 2)
lines(t, Pred_GP$mean - 2*Pred_GP$sd, col = "blue", lwd = 2, lty = 2)
points(X, Y, pch = 19, col = "red", cex = 1.3)
points(X_t, Y_t, pch = 4, cex = 1.2, lwd = 2)
plot(Y_t, Pred_GP_t$mean, xlab = "Exact values", ylab = "Predicted values")
abline(a = 0, b = 1)
X_t
source('~/Google Drive/Academia/UNI of Exeter/YEAR3/Maths/math model in bio and med/R/WK7/practice.R', echo=TRUE)
source('~/Google Drive/Academia/UNI of Exeter/YEAR3/Maths/math model in bio and med/R/WK7/practice.R', echo=TRUE)
source('~/Google Drive/Academia/UNI of Exeter/YEAR3/Maths/math model in bio and med/R/WK7/practice.R', echo=TRUE)
source('~/Google Drive/Academia/UNI of Exeter/YEAR3/Maths/math model in bio and med/R/WK7/practice.R', echo=TRUE)
source('~/Google Drive/Academia/UNI of Exeter/YEAR3/Maths/math model in bio and med/R/WK7/practice.R')
source('~/Google Drive/Academia/UNI of Exeter/YEAR3/Maths/math model in bio and med/R/WK7/practice.R', echo=TRUE)
rm(list=ls())  ##  clean R environment
library("DiceKriging")
set.seed(12)
fun <- function(xx) {   ## Define the true function
yy <- xx*sin(xx)
return(yy)
}
LowerBound <- -5
UpperBound <- 5
no.sample <- 10
X <- seq(LowerBound, UpperBound, length.out = no.sample)
Y <- fun(X)  ## Function values at X
covtype <- "exp" #"gauss"   ## Try with "matern5_2", "matern3_2", "exp", "gauss"
GP_model <- km(design = data.frame(X), response = Y, covtype = covtype, nugget = 1e-8,
control = list(trace = FALSE))
t <- seq(LowerBound, UpperBound, 0.01)   ## New locations to predict
Pred_GP <- predict(object = GP_model, newdata = data.frame(t), type = "UK", checkNames = FALSE)
Pred_GP
par(mfrow = c(1, 1), mar = c(4.2, 4.2, 1, 1))
plot(t, fun(t), type = "l", xlab = "x", ylab = "f", lwd = 2,ylim=c(-10,10))
lines(t,Pred_GP$mean-2*Pred_GP$sd, col='blue',lwd=2,lty=2)
lines(t,Pred_GP$mean+2*Pred_GP$sd, col='blue',lwd=2,lty=2)
points(X, Y, pch = 19, col = "red", cex = 1.3)
legend(x = "bottom", legend = c("True function", "GP prediction", "Credible intervals"),
lty = c(1, 1, 2, 2), col = c("black", rep("blue", 3)), lwd = 2)
### Evaluating #######
no.testpoint <- 5
X_t <- runif(n = no.testpoint, min = LowerBound, max = UpperBound)  ## generate uniform random samples
Y_t <- fun(X_t)
Pred_GP_t <- predict(object = GP_model, newdata = data.frame(X_t), type = "UK", checkNames = FALSE)
par(mfrow = c(2, 1), mar = c(4.2, 4.2, 1, 1))
plot(t, fun(t), type = "l", xlab = "x", ylab = "f", lwd = 2,ylim=c(-8,8))
lines(t, Pred_GP$mean, col = "blue", lwd = 2)
lines(t, Pred_GP$mean - 2*Pred_GP$sd, col = "blue", lwd = 2, lty = 2)
lines(t, Pred_GP$mean, col = "blue", lwd = 2)
lines(t, Pred_GP$mean + 2*Pred_GP$sd, col = "blue", lwd = 2, lty = 2)
points(X, Y, pch = 19, col = "red", cex = 1.3)
points(X_t, Y_t, pch = 4, cex = 1.2, lwd = 2)
X_t
Xplot(Y_t, Pred_GP_t$mean, xlab = "Exact values", ylab = "Predicted values")
points(X, Y, pch = 19, col = "red", cex = 1.3)
points(X_t, Y_t, pch = 4, cex = 1.2, lwd = 2)
Xplot(Y_t, Pred_GP_t$mean, xlab = "Exact values", ylab = "Predicted values")
abline(a = 0, b = 1)
Xplot(Y_t, Pred_GP_t$mean, xlab = "Exact values", ylab = "Predicted values")
library("lhs")
install.packages("lhs")
library("lhs")
library("lhs")
Xplot(Y_t, Pred_GP_t$mean, xlab = "Exact values", ylab = "Predicted values")
install.packages('rgl')
library('rgl')
set.seed(123)
X<-optimumLHS(n=no.sample,k=2)
X
X<-t((UpperBound-LowerBound)*t(X)+LowerBound)
X
Y<-apply(X,1,fun)
rame(X), response = Y, covtype = covtype, nugget = 1e-9,
control = list(trace = FALSE))
GP_model <- km(design = data.frame(X), response = Y, covtype = covtype, nugget = 1e-9,
control = list(trace = FALSE))
GP_model <- km(design = data.frame(X), response = Y, covtype = covtype, nugget = 1e-9, lower
control = list(trace = FALSE))
runif(1000)
FINV=(4*u).^(1/4);
FINV=(4*u).^(1/4)
FINV=(4*u)^(1/4)
FINV=(4*u)^(1/4)
u=runif(1000)
FINV=(4*u)^(1/4)
FINV
F=u/FINV
F
hist(F)
max(F)
min(F)
mode(F)
install.packages("SHELF")
install.packages("SHELF")
2+2
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
library("rstan") # observe startup messages
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
library("rstan") # observe startup messages
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("StanHeaders")
library("rstan") # observe startup messages
library(SHELF)
###Elicitation for expected number of cyclists that will cross the Brooklyin Bridge on a normal day in April next year
#Get Lower bound L and Upper bound U from the group
tLower = c(3000,1,150)
tUpper = c(21000,1000000,400)
#Medians and quartiles from 3 people,
tquartiles <- cbind(c(4250,11000,15000),c(200000,500000,600000),c(270,280,300))
myfit <- fitdist(vals=tquartiles, probs=c(0.25,0.5,0.75),lower=tLower,upper=tUpper)
plotfit(myfit,xl=0,xu=1000000,lp=F,ind=T,d="gamma")
plotfit(myfit,xl=0,xu=1000000,lp=T,ind=T,d="gamma")
plotfit(myfit,xl=0,xu=1000000,lp=T,ind=F,d="gamma")
plotfit(myfit,xl=0,xu=1000000,lp=T,ind=T,d="gamma")
####Group parameters
glower <- 1550
plotfit(myfit,xl=0,xu=10000,lp=T,ind=T,d="gamma")
plotfit(myfit,xl=0,xu=25000,lp=T,ind=T,d="gamma")
plotfit(myfit,xl=0,xu=30000,lp=T,ind=T,d="gamma")
####Group parameters
glower <- 1500
gupper <- 15000
GroupQuartiles <- c(3000,6500,1000)
GroupFit <- fitdist(vals=GroupQuartiles, probs=c(0.25,0.5,0.75),lower=glower,upper=gupper)
plotfit(GroupFit,xl=0,xu=15000,d="gamma")
####Group parameters
glower <- 1500
gupper <- 15000
GroupQuartiles <- c(3000,6500,1000)
GroupFit <- fitdist(vals=GroupQuartiles, probs=c(0.25,0.5,0.75),lower=glower,upper=gupper)
GroupQuartiles <- c(3000,6500,10000)
GroupFit <- fitdist(vals=GroupQuartiles, probs=c(0.25,0.5,0.75),lower=glower,upper=gupper)
plotfit(GroupFit,xl=0,xu=16000,d="gamma")
plotfit(GroupFit,xl=0,xu=20000,d="gamma")
plotfit(GroupFit,xl=0,xu=30000,d="gamma")
GroupFit
q3 <- 0.85
q1 <- 0.04
q3 <- 0.85
n <- 385
(s <- (q3 - q1) / (2 * (qnorm((0.75 * n - 0.125) / (n + 0.25)))))
install.packages("Rcpp", repos = "https://rcppcore.github.io/drat")
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
Sys.setenv(MAKEFLAGS = "-j2") # four cores used
install.packages("rstan", type = "source")
setwd("~/Google Drive/Academia/manuscripts/code/mbl_edbi_manuscript_v2/R_results_analysis/logistic_regression") #from JO
library(lme4)
library(jtools)
library(tidyverse)
library(useful)
library(caret)
library(Rpdb)
library(lme4)
library(lmerTest) # for regression functions
shiftMe=TRUE
recodeMe=TRUE
load_recoded=FALSE
saveCSV=TRUE
# Shift data ---------------------------------
if(shiftMe){
data_all = read.table("data/collected/all_subjects.csv",sep=",",header=T)
shift<-function(x,k){
head(c(rep(1,k),x[seq(length(x))[k:tail(length(x),n=1)]]),-1)
}
subs = unique(data_all$sub)
conditions = unique(data_all$condition)
data_all_shifted <- data_all
for (j in conditions){
for (i in subs){
locator_temp=which(data_all_shifted$sub==i & data_all_shifted$condition==j)
data_all_shifted[locator_temp,]$transition<-shift(data_all_shifted[locator_temp,]$transition,1)
data_all_shifted[locator_temp,]$r<-shift(data_all_shifted[locator_temp,]$r,1)
}
}
data_all_shifted$age_z = rep(0,dim(data_all_shifted)[1])
for (i in unique(data_all_shifted$sub)){
locator_temp0=which(data_all_shifted$sub==i)
locator_temp=which(data_all_shifted$trialNo==1 & data_all_shifted$condition=='NT')
data_all_shifted[locator_temp0,]$age_z = (data_all_shifted[locator_temp0,]$age-mean(data_all_shifted[locator_temp,]$age,na.rm = TRUE))/sd(data_all_shifted[locator_temp,]$age,na.rm=TRUE)
}
if(saveCSV){
write.csv(data_all_shifted,"data/collected/data_all_shifted.csv",row.names = FALSE)
}
}
# Recode data ---------------------------------
if (recodeMe || shiftMe){
data_all_shifted = read.table("data/collected/data_all_shifted.csv",sep=",",header=T)
data_all_shifted_recoded <- data_all_shifted
data_all_shifted_recoded$r=recode(data_all_shifted$r,'0'=-1L)
data_all_shifted_recoded$transition=recode(data_all_shifted$transition,'0'=-1L)
data_all_shifted_recoded$group=factor(data_all_shifted_recoded$group)
data_all_shifted_recoded$cond_order=factor(data_all_shifted_recoded$cond_order)
data_all_shifted_recoded$condition=factor(data_all_shifted_recoded$condition)
data_all_shifted_recoded$transition=factor(data_all_shifted_recoded$transition)
data_all_shifted_recoded$r=factor(data_all_shifted_recoded$r)
data_all_shifted_recoded$stay=factor(data_all_shifted_recoded$stay)
data_all_shifted_recoded$group = relevel(data_all_shifted_recoded$group, ref="HC")
data_all_shifted_recoded$cond_order = relevel(data_all_shifted_recoded$cond_order, ref="NTfirst")
data_all_shifted_recoded$condition = relevel(data_all_shifted_recoded$condition, ref="NT")
if(saveCSV){
write.csv(data_all_shifted_recoded,"data/collected/data_all_shifted_recoded.csv",row.names = FALSE)
}
}
# Load data ---------------------------------
if(load_recoded && !(recodeMe || shiftMe)){
data_all_shifted_recoded = read.table("data/collected/data_all_shifted_recoded.csv",sep=",",header=T)
}
save_outputs = TRUE;
data_all_shifted_recoded$group=factor(data_all_shifted_recoded$group)
data_all_shifted_recoded$cond_order=factor(data_all_shifted_recoded$cond_order)
data_all_shifted_recoded$condition=factor(data_all_shifted_recoded$condition)
data_all_shifted_recoded$group = relevel(data_all_shifted_recoded$group, ref="HC")
data_all_shifted_recoded$cond_order = relevel(data_all_shifted_recoded$cond_order, ref="NTfirst")
data_all_shifted_recoded$condition = relevel(data_all_shifted_recoded$condition, ref="NT")
data_all_shifted_recoded$group = relevel(data_all_shifted_recoded$group, ref="ED")
data_all_shifted_recoded$cond_order = relevel(data_all_shifted_recoded$cond_order, ref="NTfirst")
data_all_shifted_recoded$condition = relevel(data_all_shifted_recoded$condition, ref="BID")
# Fit data ---------------------------------
model1 <- glmer(stay~r*transition*(group+condition)+(r*transition+1|sub), family = binomial, data=data_all_shifted_recoded,control = glmerControl(optimizer = "bobyqa",optCtrl = list(maxfun=1e5)))
summary(model1)
model3 <- glmer(stay~r*transition*(group)+(r*transition+1|sub), family = binomial, data=data_all_shifted_recoded,control = glmerControl(optimizer = "bobyqa",optCtrl = list(maxfun=1e5)))
summary(model3)
